<?php

/**
 * @file
 * The main module file for loft_core_testing
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\loft_core_testing\Component\Utility\TestingMarkup;

/**
 * Implements hook_form_alter().
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param string $form_id
 */
function loft_core_testing_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  TestingMarkup::isTesting() && TestingMarkup::formAddClasses($form);
}

function loft_core_testing_preprocess_status_messages(&$vars) {
  if (TestingMarkup::isTesting()) {
    foreach ($vars['message_list'] as $type => $items) {
      foreach ($vars['message_list'][$type] as $delta => $item) {
        $vars['message_list'][$type][$delta] = Markup::create('<span class="' . TestingMarkup::id("status-message--{$type}__{$delta}") . '">' . $item . '</span>');
      }
    }
  }
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function loft_core_testing_preprocess_menu_local_task(&$vars) {
  if (isset($vars['link']) && ($id = $vars['link']['#url']->getRouteName())) {
    $vars['link']['#attributes']['class'][] = TestingMarkup::id('local_task--' . loft_core_css_safe($id));
  }
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function loft_core_testing_preprocess_menu_local_action(&$vars) {
  if (isset($vars['link']) && ($id = $vars['link']['#url']->getRouteName())) {
    $vars['link']['#options']['attributes']['class'][] = TestingMarkup::id('local_action--' . loft_core_css_safe($id));
  }
}

/**
 * Implements hook_preprocess_menu_link().
 */
function loft_core_testing_preprocess_menu(&$vars) {
  $vars['items'] = array_map(function ($item) use ($vars) {
    $id = loft_core_css_safe('menu--' . $vars['menu_name'] . '--' . _loft_core_testing_get_link_id($item['url']));
    $class = TestingMarkup::id($id);
    $item['attributes']->addClass($class);

    return $item;
  }, $vars['items']);
}

/**
 * Generate the link id to use for testing classes.
 *
 * You should preceed by menu name or other contextual info.
 *
 * @param \Url $url
 *
 * @return string
 */
function _loft_core_testing_get_link_id(Url $url) {
  return md5($url->toString());
}

/**
 * Implements hook_preprocess_views_view_list().
 */
function loft_core_testing_preprocess_views_view_list(&$vars) {
  if (TestingMarkup::isTesting()) {
    $view_id = $vars['view']->id();
    foreach ($vars['rows'] as &$row) {
      $row['attributes']
        ->addClass(TestingMarkup::uniqueId($view_id . '--item'));
    }
  }
}

function loft_core_testing_preprocess_views_view_table(array &$vars) {
  $id = $vars['view']->id();
  foreach ($vars['rows'] as $row) {
    $row['attributes']->addClass(TestingMarkup::uniqueId($id . '__row'));
    foreach ($row['columns'] as $column) {
      $column['attributes']->addClass(TestingMarkup::uniqueId($id . '__cell'));
      if (isset($column['fields'][0])) {
        $column['attributes']->addClass(TestingMarkup::uniqueId($id . '__column--' . $column['fields'][0]));
      }
    }
  }
}

/**
 * Implements hook_block_view_alter().
 *
 * Add testing classes to all blocks.
 *
 * @param array $build
 * @param \Drupal\Core\Block\BlockPluginInterface $block
 */
function loft_core_testing_block_view_alter(array &$build, BlockPluginInterface $block) {
  $build['#pre_render'][] = '_loft_core_testing_block_view_alter';
  $build['#loft_core_testing'][] = TestingMarkup::id($build['#base_plugin_id']);
  if ($build['#derivative_plugin_id']) {
    $build['#loft_core_testing'][] = TestingMarkup::id($build['#base_plugin_id'] . '--' . $build['#derivative_plugin_id']);
  }
}

function _loft_core_testing_block_view_alter($element) {
  if (isset($element['#loft_core_testing'])) {
    foreach ($element['#loft_core_testing'] as $class) {
      $element['#attributes']['class'][] = $class;
    }
  }

  return $element;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function loft_core_testing_preprocess_node(&$variables) {
  TestingMarkup::addDataAttribute($variables['attributes'], 'nid', $variables['node']->id());
}
