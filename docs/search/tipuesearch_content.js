var tipuesearch = {"pages":[{"title":"Changelog","text":"All notable changes to this project will be documented in this file.\n\nThe format is based on Keep a Changelog, and this project adheres to Semantic Versioning.\n\n\n\nAdded\n\n\nDrupal 10 support.\n\n\nRemoved\n\n\nloft_core_testing it is available as stand alone module now.\nloft_core_user_stash function\nloft_core_users module.  No longer available.\nstatic-content stream wrapper\n\n\n\n\nDeprecated\n\n\nDrupal\\loft_core\\Utility\\BatchProcessorBase swith to https:\/\/intheloftstudios.com\/packages\/drupal\/drupal_batch_framework\n\n\n\n\nChanged\n\n\nBREAKING CHANGE When calling loft_core_bem you get back two functions; if you pass to either of those functions string that is incompatible with https:\/\/github.com\/aklump\/bem an exception is now thrown. You should grep your entire codebase for loft_core_bem and review all arguments, and test thoroughly.\n\n\n\n\nAdded\n\n\n\\Drupal\\loft_core\\FeatureSwitches\\OperatorAdapter\n\n\nDeprecated\n\n\nis_live(); replace with https:\/\/github.com\/aklump\/drupal_feature_switches and use \\Drupal\\loft_core\\FeatureSwitches\\OperatorAdapter as necessary.\n\n\n\n\nChanged\n\n\nCypress::with('0') will now print 0 in the element portion instead of dropping. Before the output was foo; now the output is foo__0.\n\n\nRemoved\n\n\nHtmlDomParser library (sunra\/php-simple-html-dom-parser)\n\n\n\n\nAdded\n\n\n\\Drupal\\loft_core\\Plugin\\rest\\AnnotatedCollectionJsonResponse\n\\Drupal\\loft_core\\Service\\DatesService::getLocalTimeZone()\n\n\nRemoved\n\n\nBREAKING CHANGE!!! Public property \\Drupal\\loft_core\\Service\\DatesService::localTimeZone\n\n\n\n\nFixed\n\n\nRemote images without extensions will now have extensions added when copying them, by detecting the image type. This fixes an issue with vimeo thumbnails being saved without file extensions.\n\n\n\n\nAdded\n\n\nNo Orphans filter to prevent single word orphans. Add it to your text format(s). Learn more at \\Drupal\\loft_core\\Plugin\\Filter\\NoOrphansFilter\n\n\nRemoved\n\n\nThe extra email from address \"Registration email address\". There is no upgrade path, this simple breaks implementations.\n\n\n\n\nAdded\n\n\nShare link tab.\n\n\nRemoved\n\n\n$config['loft_core.settings']['permalink_type'] = 'absolute';\n\n\n\n\nDeprecated\n\n\n\\Drupal\\loft_core\\Utility\\BemTrait - Use \\Drupal\\front_end_components\\BemTrait instead and declare a dependency on that module.\n\n\n\n\nAdded\n\n\nAdded \\Drupal\\loft_core\\Utility\\ExpiringCacheTags\n\n\n\n\nRemoved\n\n\nHOOK_loft_core_redirect_node_BUNDLE_TYPE_view; use Rabbit Hole Hooks instead.\nHOOK_loft_core_redirect_node_BUNDLE_TYPE_edit; no alternative given.\nHOOK_loft_core_redirect_node_BUNDLE_TYPE_delete; no alternative given.\nYou should use\n\n\n\n\nRemoved\n\n\nDRUPAL_ENV_ROLE and drupalSettings.env.env\nYou must replace all usages of DRUPAL_ENV_ROLE with DRUPAL_ENV; having two concepts was too darn confusing.\n\n\n\n\n\nThe API for the redirect hooks have changed. You must update the following implementations per loft_core.api.php.\n\n\nHOOK_loft_core_redirect_node_BUNDLE_TYPE_view\nHOOK_loft_core_redirect_node_BUNDLE_TYPE_edit\nHOOK_loft_core_redirect_node_BUNDLE_TYPE_delete\n\n\n\n\n\n\nBREAKING CHANGE: The structure of theme_form_help has changed, it is now wrapped with a\n\n\n&lt;\n\nblockquote>, and uses different class names.","tags":"","url":"CHANGELOG.html"},{"title":"Loft Core","text":"This module contains features that I wish were in core, and which I often use for all my projects.  Documentation can be found at docs\/index.html or by using the Advanced Help module.\n\n\n\n\nAdd the following to the application's composer.json above web root.\n\n{\n  \"repositories\": [\n    {\n      \"type\": \"path\",\n      \"url\": \"web\/modules\/custom\/loft_core\"\n    }\n  ]\n}\n\nNow run composer require drupal\/loft-core\n\n\n\n\n\nIn the Loft Studios\nAaron Klump - Developer\nPO Box 29294 Bellingham, WA 98228-1294\nskype: intheloftstudios\nd.o: aklump\nhttp:\/\/www.InTheLoftStudios.com","tags":"","url":"README.html"},{"title":"Roadmap and Todo List","text":"[ ] Port the functions in loft_core.install","tags":"","url":"ROADMAP.html"},{"title":"Ajax","text":"In automated testing you may need to wait for an ajax request to complete.  Here are some strategy.\n\nUse data-data-time\n\nThe idea is to monitor a data attribute timestamp that gets updated by the ajax response, here is the markup model:\n\n&lt;div class=\"story t-story\" data-data-time=\"1550610871.67\"&gt;...&lt;\/div&gt;\n\n\nIn the page markup for the initial render you must call loft_core_add_data_refresh:\n\n$attributes\n  -&gt;addClass('story')\n  -&gt;addClass(loft_core_test_class('story'));\ngop3_core_include('ajax');\nloft_core_add_data_refresh($attributes);\n\n\nIn your commands response you add this command:\n\npublic function getCommands__favorites__post(&amp;$commands, $markup) {\n  $commands[] = loft_core_ajax_command_update_data_refresh('.story');\n}\n\n\nThen, in the test method you do something like this:\n\n$this-&gt;loadPageByUrl('\/node\/11206');\n$el = $this-&gt;getDomElements([\n  '.t-story',\n  '.t-favorite-add--11206',\n]);\n$el['.t-favorite-add--11206']-&gt;click();\n$this-&gt;waitForDataRefresh('.t-story');","tags":"","url":"ajax.html"},{"title":"Breadcrumb","text":"Working with breadcrumbs can eased with \\Drupal\\loft_core\\BreadcrumbMutator.  See code comments for more info.","tags":"","url":"breadcrumb.html"},{"title":"Clipboard API","text":"This module provides a copy to clipboard on click API.  Here is an example implementation.\n\n\nAdd the library loft_core\/clipboard.\nAdd the following to a clickable element data-loft-core-clipboard, whose value is the value to be copied to the clipboard.\n\n\n\n\n\nAdd data-loft-core-clipboard-confirm with a value that will temporarily replace the inner html of the clicked element.  After a short delay the clicked element's original inner HTML will be returned.\nControl the reveal duration by setting data-loft-core-clipboard-confirm-duration to a millisecond value.\n\n\n\n\n&lt;a href=\"\/node\/18741\" data-loft-core-clipboard=\"\/node\/18741\" data-loft-core-clipboard-confirm=\"&amp;quot;\/node\/18741&amp;quot; copied!\" data-loft-core-clipboard-confirm-duration=\"5000\"&gt;Copy link&lt;\/a&gt;","tags":"","url":"clipboard.html"},{"title":"Working With Entities Cheat Sheet","text":"Using EntityTrait you want to always cast a variable at the top of your script, this will speed up your code.  The benchmarks show that the get() and f() methods have no performance difference; however instantiating the service expensive.\n\n$extract = \\Drupal::service('itls.extract')-&gt;setEntity($node);\n$extract-&gt;f(...\n$extract-&gt;f(...\n$extract-&gt;f(...\n$extract-&gt;f(...\n\n\n\n\n\/\/ Define the default and the field name.\n$url = $extract-&gt;f('#', 'field_url');\n\n\n\n\n$summary = $extract-&gt;safe('', 'field_summary');\n\n\n\n\n$items = $extract-&gt;items('field_references');\n\n\nIf you don't have access to the extract service, then use this:\n\n$items = $n-&gt;get($node, 'field_references.0', []);\n\n\n\n\nMarkup Safe\n\nWhen given an entity field item the safe value will be the first of:\n\n$extract-&gt;safe('', 'field_thing');\n\n\n\n$entity-&gt;field_thing['und'][0]['safe_value']\ncheck_markup($entity-&gt;field_thing['und'][0]['value'], $entity-&gt;field_thing['und'][0]['format'])\nCore::getSafeMarkupHandler()","tags":"","url":"entities.html"},{"title":"Archiving Entities","text":"Here is an example of how to use loft_core_update__archive_entities in a hook_update_n implementation to archive entites.\n\n\/**\n * Create archive of the product entities.\n *\n * @throws \\DrupalUpdateException\n *\/\nfunction MODULE_update_N() {\n  $sql = \"SELECT\n  created,\n  product_id,\n  p.revision_id,\n  sku,\n  title,\n  type,\n  field_format_value AS format,\n  ROUND(commerce_price_amount \/ 100, 2) AS price,\n  field_xml_metadata_xml AS metadata,\n  filename AS image_filename,\n  uri AS image_uri,\n  field_description_references_nid AS related_nid,\n  field_product_description_value AS description,\n  field_product_overview_value AS overview,\n  field_product_contents_value AS contents\nfrom commerce_product p\n  LEFT JOIN field_data_field_product_images pi ON (pi.entity_id = product_id)\n  LEFT JOIN field_data_commerce_price cp ON (cp.entity_id = product_id)\n  LEFT JOIN field_data_field_format ff ON (ff.entity_id = product_id)\n  LEFT JOIN field_data_field_product_description pd ON (pd.entity_id = product_id)\n  LEFT JOIN field_data_field_product_contents pc ON (pc.entity_id = product_id)\n  LEFT JOIN field_data_field_product_overview po ON (po.entity_id = product_id)\n  LEFT JOIN field_data_field_xml_metadata xml ON (xml.entity_id = product_id)\n  LEFT JOIN field_data_field_description_references fdr ON (fdr.entity_id = product_id)\n  LEFT JOIN file_managed f ON (f.fid = pi.field_product_images_fid)\nWHERE 1;\";\n  module_load_include('install', 'loft_core', 'loft_core');\n\n  return loft_core_update__archive_entities(\n    'Create archive of the product entities.',\n    $sql,\n    'commerce_products',\n    [\n      ['image_filename', 'image_uri'],\n    ],\n    function ($key, &amp;$value) {\n      if ($key === 'metadata') {\n        \/\/ Convert XML To JSON.\n        $value = simplexml_load_string($value);\n        $value = $value ? json_encode($value) : NULL;\n      }\n\n      return TRUE;\n    }\n  );\n}","tags":"","url":"entity_archive.html"},{"title":"Protecting Critical Entities","text":"With Loft Core, it's easy to protect critical entities that should not be deleted through the admin UI.  Learn more by looking at the docblocks in \\Drupal\\loft_core\\Service\\EntityProtectionService.\n\n\nAdd this to settings.php, where SE_CORE_ is the uppercase name of your custom module or other identifying prefix you wish to use for your PHP constants.\n\n$config['loft_core.entity_protection']['prefix'] = 'SE_CORE_';\n\nDefine some constants like so, in your core module file.\n\n&lt;?php\n\n\/**\n * @file\n * Module entry file for se_core.\n *\/\n\ndefine('SE_CORE_NID_ABOUT', 531);\ndefine('SE_CORE_USER_ID_API', 123);\ndefine('SE_CORE_BLOCK_CONTENT_ID_FOOTER_ADDRESS', 7);\ndefine('SE_CORE_COMMERCE_STORE_ID_SEAO', 1);\n\n...\n\nAdd this to hook_form_alter implementation:\n\n\/**\n * Implements hook_form_alter().\n *\/\nfunction se_core_form_alter(array &amp;$form, FormStateInterface $form_state, $form_id) {\n  \\Drupal::service('loft_core.entity_protection')\n    -&gt;handleForm($form, $form_state, $form_id);\n  ...  \n\nAdd this to hook_entity_predelete implementation:\n\n\/**\n * Implements hook_entity_predelete().\n *\/\nfunction se_core_entity_predelete(EntityInterface $entity) {\n  \\Drupal::service('loft_core.entity_protection')\n    -&gt;handlePreDelete($entity);\n}\n\nThe delete UI for these entities will be removed from Drupal.","tags":"","url":"entity_protection.html"},{"title":"Forms API","text":"See loft_core_form_hide_elements().\n\n\n\nIt is nice to be able to keep an element visible, yet disable it. Making this easy is the goal of loft_core_form_disable_elements().\n\n\n\nThis module defines a new element called 'form_help'. See \\Drupal\\loft_core\\Element\\FormHelp for usage examples.\n\n\n\nloft_core_form_tabindex()","tags":"","url":"forms.html"},{"title":"Images","text":"","tags":"","url":"images.html"},{"title":"Permalink or &quot;Copy link&quot; tab","text":"For users with the correct permissions two tabs will be added to node pages, which when clicked copies a canonical link to the clipboard.  The first tab Copy link copies a canonical internal link (no domain), and should be used for page to page linking within the website.  The second tab Share link should be used links to embed in emails, social sharing, etc; outside of the website context, because it contains an absolute URL.\n\n\n\nToggle the permissions as necessary to hide\/show one or both tabs:\n\n* loft_core access local link tab (Copy link)\n* loft_core access permalink tab (Share link)\n\n\n\n\nTo change the tab label implement hook_local_task_alter.  See loft_core.api.php for an example implementation.","tags":"","url":"permalink.html"},{"title":"Redirects","text":"This module used to provide an API for entity redirects, but no longer.\n\n\nUse exclusively the Rabbit Hole for redirecting entities.\nUse Rabbit Hole Hooks for hook-based redirection.","tags":"","url":"redirects.html"},{"title":"Search Results","text":"","tags":"","url":"search--results.html"},{"title":"settings.php","text":"settings.env.php\nsettings.dev.php\nsettings.prod.php\nsettings.local.php\n\n\n\n\nIf using environment variables then the following does not apply.\n\n\nAdd the following lines to settings.php at the very end:\n\ndefine('DRUPAL_ENV_PROD', 'prod');\ndefine('DRUPAL_ENV_STAGING', 'staging');\ndefine('DRUPAL_ENV_DEV', 'dev');\nrequire dirname(__FILE__) . '\/settings.env.php';\nrequire dirname(__FILE__) . '\/settings.' . DRUPAL_ENV . '.php';\nrequire dirname(__FILE__) . '\/settings.local.php';\n\nCreate a file settings.env.php with this:\n\n&lt;?php\n\/**\n * @var $settings_presets\n * Define the environment: DRUPAL_ENV_DEV or DRUPAL_ENV_PROD\n *\n * prod:\n * - will server minified js\n * - will enable the prod settings presets file\n *\/\ndefine('DRUPAL_ENV', DRUPAL_ENV_DEV);\n\nCreate settings.dev.php and settings.prod.php and put in the environment settings specific to environment, e.g. cache settings.\nMove the database declaration into settings.local.php.\nIf you're using loft_deploy module you must add a $conf var right below the DRUPAL_ENV definition.\n\n$conf['loft_deploy_site_role'] = DRUPAL_ENV;\n\n\n\n\n\nDRUPAL_ENV\nDRUPAL_ENV_PROD\nDRUPAL_ENV_STAGING\nDRUPAL_ENV_DEV\n\n\n\n\nThere must be at least on library using the dependeny of core\/drupalSettings for these to appear on the page.\n\ndrupalSettings.env.env\n\ndrupalSettings.env.prod\ndrupalSettings.env.staging\ndrupalSettings.env.dev","tags":"","url":"settings.html"},{"title":"Smart Urls","text":"User enters: http:\/\/www.mysite.com\/some-cool-aliased-title\nYou want: \/node\/123\nUse loft_core_smart_url\n\n\nImagine an admin entering a link to the site.  As developer want the unaliased relative path, as the admin, they copy and past the absolute aliased path.  It's a pain to explain to theme that they have to convert it to the way you want it, so you give up.  But that's where loft_core_smart_url() comes in.  Hand it the url they entered, and it will give you the url you want.\n\nAdd this to a presave hook after collection an url in a node form.\n\nAdd this to a filter that can then convert the bad urls to good urls.\n\nRock.\n\n\n\nThis should work out of the box, but to fine tune it add something like the following to settings.php.\n\n$config['loft_core.settings']['smart_url_regex'] = '\/mysite.(?:org|loft)$\/i';","tags":"","url":"smart_url.html"},{"title":"Testing","text":"Test mode is enabled by default when DRUPAL_ENV does not equal DRUPAL_ENV_PROD.  This means that test classes will be appened to elements whenever the function loft_core_test_class() is used.\n\nWhen not in test mode, test classes will not be added.\n\n\n\nIn order to test against a production environment you need to enable test mode using an endpoint.  You must set up the endpoint with an access key in your settings.php like this:\n\n$config['loft_core.settings']['test_mode_url_token'] = '{some obscure public key that will appear in your url}';\n\n\nWhen you visit the url endpoint, include the testing key like so:\n\n\/loft-core\/testing\/enable\/{test_mode_url_token}\n\n\nThis will enable the test mode for a short duration and cause test classes to appear on production, for your IP only.  The response is JSON and contains the expiry timestamp.\n\n\n\nParagraphs Add Widget\n\n\n\nThe buttons on a paragraph element widget are really tricky, use loft_core_paragraphs_element_add_test_classes to simplify test classes.\n\nIn a form alter hook do something like:\n\nloft_core_paragraphs_element_add_test_classes($form, [\n  'field_components',\n]);\n\n\nTo target the dropbutton toggle you may need to pick one of these:\n\n.t-field_components_add .dropbutton__toggle\n.t-field_components_add .dropbutton-toggle button\n\n\nTo target any of the add paragraph buttons:\n\n.t-field_components_add__members_list\n.t-field_components_add__members_photos\n.t-field_components_add__...\n\n\nTo target any paragraph that has been added:\n\n.t-field_components__item\n.t-field_components__item1\n.t-field_components__item...\n\n\nSometimes the auto classes creates duplicates.\n\nThis has shown up for WYSIWYG text areas, to handle this use also the element for your selector like this:\n\n    - .t-field_description\n    + textarea.t-field_description\n\n\nHandling the Chosen Module\n\nYou may need to upgrade your selectors to use the select portion:\n\n    select.t-field_newsletter","tags":"","url":"testing.html"},{"title":"Add TrackJS.com to your website","text":"Sign up for an account at http:\/\/www.trackjs.com\nObtain your token and add it to settings.php\n\n$conf['loft_core_trackjs_token'] = '5302679c8b624e0395a6a6da5b1199d6';\n\nAdd the following snippet in html.tpl.php in your theme before $scripts output.\n\n&lt;?= $loft_core_tracking ?&gt;\n&lt;?= $scripts; ?&gt;\n\nThis will only be present when DRUPAL_ENV is prod.\n\n\n\n\nSee HOOK_loft_core_trackjs_alter() for more info.","tags":"","url":"trackjs.html"},{"title":"User Persistent Dismiss","text":"This API provides a means of clicking and element and remembering that it was clicked so that element can be hidden on next page visit.\n\nAn example of this is a popup modal that should hide for 1 month when it's closed.\n\nImplementation code follows:\n\n\n\nThis example shows how to use this API to track the appearance of a Drupal block.\n\nAccess Check\n\nfunction my_module_block_access(\\Drupal\\block\\Entity\\Block $block, $operation, \\Drupal\\Core\\Session\\AccountInterface $account) {\n  list($provider, $uuid) = explode(':', $block-&gt;getPluginId() . ':');\n\n  \/\/ First check that we have a block_content entity...\n  if ('view' === $operation &amp;&amp; 'block_content' === $provider) {\n    $block_content = array_values(\\Drupal::entityTypeManager()\n        -&gt;getStorage('block_content')\n        -&gt;loadByProperties([\n          'uuid' =&gt; $uuid,\n        ]))[0] ?? NULL;\n\n    \/\/ ... then check if it's the bundle we want to track.\n    if ('foobar' === $block_content-&gt;bundle()) {\n      $dismiss = new \\Drupal\\loft_core\\Utility\\UserPersistentDismiss($block-&gt;getPluginId());\n      if ($dismiss-&gt;isDismissed()) {\n        return \\Drupal\\Core\\Access\\AccessResult::forbidden('Cookie exists with previous dismissal.');\n      }\n    }\n  }\n\n  \/\/ No opinion.\n  return \\Drupal\\Core\\Access\\AccessResult::neutral();\n}\n\n\nBlock Build\n\nfunction my_module_block_content_view_alter(array &amp;$build, \\Drupal\\Core\\Entity\\EntityInterface $entity, \\Drupal\\Core\\Entity\\Display\\EntityViewDisplayInterface $display) {\n  if ($entity-&gt;bundle() == 'foobar') {\n    $dismiss = new \\Drupal\\loft_core\\Utility\\UserPersistentDismiss($entity-&gt;getEntityTypeId() . ':' . $entity-&gt;uuid());\n    $build['close_button']['#attributes'] += $dismiss-&gt;getJavascriptDismiss()-&gt;toArray();\n    $dismiss-&gt;applyTo($build);\n  }\n}","tags":"","url":"user-persistent-dismiss.html"},{"title":"Vimeo","text":"Use \\Drupal\\loft_core\\Utility\\VimeoBasedEntityBuilder to help with pulling metadata from Vimeo into an entity.\nhttps:\/\/developer.vimeo.com\/apps\nThis is incompatible with Drupal 9.5.\n\n\n\n\n\ncomposer require vimeo\/vimeo-api\n\n\n\n\n\ncomposer require drupal\/video_embed_field\n\n\n\n\n    VIMEO_CLIENT_ID=\"...\"\n    VIMEO_CLIENT_SECRET=\"...\"\n    VIMEO_ACCESS_TOKEN=\"...\"\n\n\n\n\n    public function presave__video() {\n        if (!($vimeo_url = $this-&gt;f('', 'field_vimeo'))) {\n          return;\n        }\n        $provider = \\Drupal::service('video_embed_field.provider_manager')\n          -&gt;createInstance('vimeo', ['input' =&gt; $vimeo_url]);\n        if (!($vimeo_id = $provider-&gt;getIdFromInput($vimeo_url))) {\n          return;\n        }\n        if (!($client_id = getenv('VIMEO_CLIENT_ID'))) {\n          throw new \\RuntimeException(\"Missing VIMEO_CLIENT_ID\");\n        }\n        if (!($secret = getenv('VIMEO_CLIENT_SECRET'))) {\n          throw new \\RuntimeException(\"Missing VIMEO_CLIENT_SECRET\");\n        }\n        if (!($token = getenv('VIMEO_ACCESS_TOKEN'))) {\n          throw new \\RuntimeException(\"Missing VIMEO_ACCESS_TOKEN\");\n        }\n        try {\n          $client = new Vimeo(\n            $client_id,\n            $secret,\n            $token\n          );\n          \\Drupal::service('loft_core.vimeo_based_entity')\n            -&gt;setClient($client)\n            -&gt;setTitleField('title')\n            -&gt;setPosterField('field_video_poster')\n            -&gt;fillWithRemoteData($this-&gt;getEntity(), $vimeo_id);\n        }\n        catch (\\Exception $exception) {\n          watchdog_exception('se.vimeo', $exception);\n        }\n    }","tags":"","url":"vimeo.html"}]};
