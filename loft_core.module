<?php
/**
 * @file
 * Base file for the loft_core module.
 *
 * @defgroup loft_core Loft Core
 * @{
 */
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\loft_core_testing\Component\Utility\TestingMarkup;
use Drupal\Component\Utility\NestedArray;

require_once dirname(__FILE__) . '/includes/loft_core.hooks.inc';
require_once dirname(__FILE__) . '/includes/loft_core.forms.inc';
require_once dirname(__FILE__) . '/includes/loft_core.ajax.inc';
require_once dirname(__FILE__) . '/includes/loft_core.utilities.inc';

/**
 * Test if a feature is live.
 *
 * If $feature is not registered it defaults to live.
 *
 * @param string $feature The id of the feature as declared by
 * HOOK_loft_core_code_release_info().
 *
 * @return bool
 *
 * @deprecated Use feature_switches module instead.
 *
 * @see \Drupal\feature_switches\FeatureList
 * @see \Drupal\loft_core\FeatureSwitches\OperatorAdapter
 */
function is_live($feature) {
  static $features = NULL;
  if (is_null($features)) {
    $features = Drupal::moduleHandler()
      ->invokeAll('loft_core_code_release_info');
    $features[$feature]['is_live'] = isset($features[$feature]) ? $features[$feature]['is_live'] : TRUE;
  }

  return $features[$feature]['is_live'] ?? FALSE;
}

/**
 * Provides a test css class when environment is not prod.
 *
 * @param string $class
 *
 * @return string
 *
 * @deprecated Use TestingMarkup::id instead.
 */
function loft_core_test_class(string $class): string {
  static $testing;
  if (TestingMarkup::isTesting()) {

    // First time on page load that we get here, we may delete the expiry.
    if (!$testing && !empty($expiry) && $expiry < time()) {
      Drupal::state()->delete('loft_core_test_mode_expiry');
    }
    $testing = TRUE;

    return 't-' . $class;
  }

  return '';
}

/**
 * Add test classes to element children.
 *
 * This will only add the classes if the elements exist, so this is a very
 * handy shortcut function for processing forms.
 *
 * @code
 *   loft_core_element_add_test_classes($form, [
 *     'field_account_type.widget',
 *     'account.mail as mail',
 *   ]);
 * @endcode
 *
 * The previous code will yield the following values in the form:
 * @code
 *   $form['field_account_type']['widget']['#attributes']['class'][0] =
 *   't-field_account-type';
 *   $form['account']['mail']['#attributes']['class'][0] = 't-mail';
 * @endcode
 *
 * @param array &$element
 *   A render element, usually a form.
 * @param array $paths
 *   An indexed array with one or more items that point to a key path inside of
 *   $element, e.g. 'field_account_name.widget.0.value'.  The #attributes key
 *   will be added as a child of this path.  The test class is the substring up
 *   to and not including the first '.' in the path; in the example just given,
 *   the test class will be built on 'field_account_name'. In cases where you
 *   want to specify the test class, you can use ' as [test class]', e.g.
 *   'field_account_name.widget.0.value as account_name' for the array item
 *   value.
 */
function loft_core_element_add_test_classes(array &$element, array $paths): void {
  foreach ($paths as $path) {
    list($path, $test_class) = explode(' as ', $path . ' as ' . $path);
    list($test_class) = explode('.', $test_class);
    $parents = is_array($path) ? $path : explode('.', $path);
    $exists = FALSE;
    NestedArray::getValue($element, $parents, $exists);
    if ($exists) {
      $parents = array_merge($parents, ['#attributes', 'class']);
      $classes = NestedArray::getValue($element, $parents) ?? [];
      $classes[] = TestingMarkup::id($test_class);
      NestedArray::setValue($element, $parents, $classes);
    }
  }
}

/**
 * Adds commands echoing all drupal messages to trackjs
 *
 * Place this in an ajax response function where you have access to the
 * $commands array that is being build for the response.s
 *
 * @param array &$commands
 * @param array $severities Which drupal_get_messages() severity levels to
 *                          send.  Defaults to warning and error.
 *
 * @see _loft_core_trackjs_get_severities().
 */
function loft_core_trackjs_echo_drupal_messages(
  array &$commands, array $severities = [
  'warning',
  'error',
]
) {
  $groups = Drupal::messenger()->all();
  foreach ($groups as $level => $messages) {
    if (!in_array($level, $severities)) {
      continue;
    }
    switch ($level) {
      case 'warning':
        $trackjs_level = 'warn';
        break;
      case 'error':
        $trackjs_level = 'error';
        break;
      default:
        $trackjs_level = 'info';
        break;
    }
    foreach ($messages as $message) {
      $commands[] = loft_core_ajax_command_trackjs_console($trackjs_level,
        $message);
    }
  }
}
