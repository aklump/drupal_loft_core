<?php
/**
 * @file
 * Base file for the loft_core module.
 *
 * @defgroup loft_core Loft Core
 * @{
 */

if ($conf['loft_core_autoload']) {
    /**
     * Implements hook_boot().
     */
    function loft_core_boot()
    {
        // You must load the composer autoload in this fashion.
        include_once dirname(__FILE__) . '/vendor/autoload.php';
    }
}


/**
 * Disable an array of form elements with a consistent message.
 *
 * @code
 * $paths = array();
 * $paths[] = 'field_description.und.0';
 * $paths[] = 'field_keywords.und';
 * loft_core_form_disable_elements($form, $paths);
 * @endcode
 *
 * @param array  &$form
 * @param array  $paths       An array of paths to be used by data_api().
 * @param string $module_name This will be used in the default message.
 * @param null   $message     If the default message is not sufficient, enter a
 *                            custom message here.
 */
function loft_core_form_disable_elements(&$form, $paths, $module_name = null, $message = null)
{
    $g = data_api();
    if (is_null($message)) {
        $module_name = empty($module_name) ? 'Loft Core' : $module_name;
        $message = t('This field is controlled by the %module module and cannot be modified in the UI.', array('%module' => $module_name));
    }
    foreach ($paths as $path) {
        if ($g->get($form, $path)) {
            $type = $g->get($form, "$path.#type");
            $g->set($form, "$path.#disabled", true);
            switch ($type) {
                case 'container':
                    $message_path = "$path.#suffix";
                    break;
                default:
                    $message_path = "$path.#description";
                    break;
            }
            $g->set($form, $message_path, $message);
        }
    }
}

function loft_core_form_hide_elements(&$form, $paths)
{
    $g = data_api();
    foreach ($paths as $path) {
        if ($g->get($form, $path)) {
            $g->set($form, "$path.#access", false);
        }
    }
}

/**
 * Return the maximum weight in a render array, top level only.
 *
 * @param $render_array
 *
 * @return int
 */
function loft_core_max_weight($render_array)
{
    $max = 0;
    array_walk($render_array, function ($value) use (&$max) {
        $max = max($max, data_api()->get($value, '#weight', 0));
    });

    return $max;
}

/**
 * Return the minimum weight in a render array, top level only.
 *
 * @param $render_array
 *
 * @return int
 */
function loft_core_min_weight($render_array)
{
    $min = 0;
    array_walk($render_array, function ($value) use (&$min) {
        $min = min($min, data_api()->get($value, '#weight', 0));
    });

    return $min;
}
