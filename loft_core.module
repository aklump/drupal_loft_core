<?php
/**
 * @file
 * Base file for the loft_core module.
 *
 * @defgroup loft_core Loft Core
 * @{
 */

use Drupal\loft_core\Redirect;
use Drupal\loft_core\StaticContentStreamWrapper;

// By default we will assume production environment.  To control or override this behavior see the documentation regarding these constants, e.g. settings.env.php, etc.
if (!defined('DRUPAL_ENV')) {
  define('DRUPAL_ENV', 'prod');
}
if (!defined('DRUPAL_ENV_ROLE')) {
  define('DRUPAL_ENV_ROLE', 'prod');
}

// These should already be defined in settings as of 7.x-0.3-rc26, but in case they're not.
if (!defined('DRUPAL_ENV_PROD')) {
  define('DRUPAL_ENV_PROD', 'prod');
}
if (!defined('DRUPAL_ENV_STAGING')) {
  define('DRUPAL_ENV_STAGING', 'staging');
}
if (!defined('DRUPAL_ENV_DEV')) {
  define('DRUPAL_ENV_DEV', 'dev');
}

require_once dirname(__FILE__) . '/includes/loft_core.forms.inc';

/**
 * Implements hook_boot().
 */
function loft_core_boot() {
  // You must load the composer autoload in this fashion.
  include_once dirname(__FILE__) . '/vendor/autoload.php';
}

/**
 * Implements hook_init().
 */
function loft_core_init() {
  drupal_add_js(array(
    'DrupalEnv' => DRUPAL_ENV,
    'DrupalEnvRole' => DRUPAL_ENV_ROLE,
    'DrupalEnvProd' => DRUPAL_ENV_PROD,
    'DrupalEnvStaging' => DRUPAL_ENV_STAGING,
    'DrupalEnvDev' => DRUPAL_ENV_DEV,

    // @deprecated 2017-10-25T13:50, AKLUMP
    //        'DRUPAL_ENV' => DRUPAL_ENV,
    //        'DRUPAL_ENV_ROLE' => DRUPAL_ENV_ROLE,
  ), 'setting');
  drupal_add_js(drupal_get_path('module',
      'loft_core') . '/loft_core.js',
    array(
      'scope' => 'header',
      'group' => JS_DEFAULT,
    ),
    'file');
}

/**
 * Implements hook_preprocess_html().
 */
function loft_core_preprocess_html(&$vars) {
  global $user;
  $vars['loft_core_tracking'] = '';
  if (DRUPAL_ENV_ROLE === 'prod' && ($token = variable_get('loft_core_trackjs_token', NULL))) {

    // @link http://docs.trackjs.com/tracker/configuration
    $trackjs = array(
      'config' => '',
      'metadata' => array(),
    );

    $trackjs['config']['token'] = $token;

    if (function_exists('web_package_get_version')) {
      $trackjs['config']['version'] = web_package_get_version();
    }

    // TrackJS allows you to track errors for multiple applications from the same account.
    // See the UI documentation for how to setup applications.
    $trackjs['config']['application'] = NULL;

    // If you have some identifiable string that represents a user or customer,
    //please include it.
    // In the TrackJS UI we allow you to group and filter by this value.
    $trackjs['config']['userId'] = user_is_logged_in() ? $user->uid : NULL;
    $trackjs['metadata']['username'] = user_is_logged_in() ? $user->name : NULL;

    // Similar to userId,
    //if you have a session guid or something you can set it here.
    // We allow you to search on this value in the UI.
    $trackjs['config']['sessionId'] = session_id();

    drupal_alter('loft_core_trackjs',
      $trackjs);

    $config = json_encode(array_filter($trackjs['config']));

    $meta = array();
    foreach (array_filter($trackjs['metadata']) as $key => $value) {
      $meta[] = 'trackJs.addMetadata("' . $key . '",
            "' . $value . '");';
    }
    $meta = implode(';',
      $meta);
    $vars['loft_core_tracking'] = <<<EOD
<!-- BEGIN TRACKJS -->
<script type="text/javascript">window._trackJs = {$config};</script>
<script type="text/javascript" src="https://cdn.trackjs.com/releases/current/tracker.js"></script>
<script type="text/javascript">{$meta};</script>
<!-- END TRACKJS -->        
EOD;
  }
}

/**
 * Implements hook_menu().
 */
function loft_core_menu() {
  $items['loft-core/testing/enable/%'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Enable test mode',
    'page callback' => 'loft_core_test_mode',
    'page arguments' => array(TRUE),
    'access callback' => 'loft_core_test_mode_access',
    'access arguments' => array(3),
  );

  $items[StaticContentStreamWrapper::URL_BASE] = [
    'type' => MENU_CALLBACK,
    'title' => 'Raw static content',
    'page callback' => 'loft_core_static_content_stream',
    'access arguments' => ['access raw static content'],
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function loft_core_permission() {
  return array(
    'access raw static content' => array(
      'restrict access' => TRUE,
      'title' => t('Access raw static content'),
      'description' => t('Allow user to access static content files directly.'),
    ),
  );
}

/**
 * Determine if the user has access to test mode.
 *
 * @param string $token
 *   The public access token for test access.
 *
 * @return bool
 *   True if access should be granted.
 */
function loft_core_test_mode_access($token) {
  if (!($control = variable_get('loft_core_testing_key', NULL))) {
    throw new \RuntimeException("You must set a value for \$conf['loft_core_testing_key'] in your settings.php file.");
  }

  return $token === $control;
}

/**
 * Stream a static-content file.
 *
 * @param string $target
 *   The target static content file relative to the static content directory.
 */
function loft_core_static_content_stream($target) {
  $uri = 'static-content://' . $target;
  if (file_exists($uri)) {
    $headers = [];
    file_transfer($uri, $headers);
    drupal_access_denied();
  }
  else {
    drupal_not_found();
  }
  drupal_exit();
}

/**
 * Page callback to
 *
 * @param $state
 */
function loft_core_test_mode($state) {
  if ($state) {
    $min = 15;
    setrawcookie('loft_core_testing', ip_address(), REQUEST_TIME + $min * 60, '/');
    $message = 'Test mode enabled for @minutes.';
  }
  else {
    setrawcookie('loft_core_testing', '', REQUEST_TIME - 3600, '/');
    $message = 'Test mode disabled.';
  }
  drupal_set_message(t($message, array(
    '@minutes' => format_plural($min, '1 minute', '@count minutes'),
  )), 'status', FALSE);

  drupal_goto();
}

/**
 * Implements hook_menu_alter().
 */
function loft_core_menu_alter(&$items) {
  if (variable_get('loft_core_node_redirects', FALSE)) {
    $key = 'node/%node';
    if (isset($items[$key])) {
      $items[$key]['page callback'] = 'loft_core_node_page';
      $items[$key]['page arguments'][] = 'view';
    }
    $key = 'node/%node/view';
    if (isset($items[$key])) {
      $items[$key]['page callback'] = 'loft_core_node_page';
      $items[$key]['page arguments'][] = 'view';
    }
    $key = 'node/%node/edit';
    if (isset($items[$key])) {
      $items[$key]['page callback'] = 'loft_core_node_page';
      $items[$key]['page arguments'][] = 'edit';
    }
    $key = 'node/%node/delete';
    if (isset($items[$key])) {
      $items[$key]['page callback'] = 'loft_core_node_page';
      $items[$key]['page arguments'][] = 'delete';
    }
  }
}

/**
 * Menu callback: Displays a single node,
 * but checks for a redirect first.
 *
 * @param $node
 *   The node object.
 *
 * @return
 *   A page array suitable for use by drupal_render().
 *
 * @see node_menu()
 *
 *
 * // TODO Support node create?
 */
function loft_core_node_page($node, $op) {
  if (is_string($node)) {
    switch ($node) {
      case 'node_delete_confirm':
        $form_id = $node;
        $node = $op;
        $op = 'delete';
        break;
    }
  }

  //
  //
  // First check for a BUNDLE_TYPE_page...
  //
  if ($op === 'view') {
    $type = $node->type;
    $hook = 'loft_core_node_' . $type . '_page';
    if (($modules = module_implements($hook))) {
      // We only take the last one.
      $callback = end($modules) . '_' . $hook;

      return $callback($node);
    }
  }

  //
  //
  // ... then look for a redirect.
  //
  if (($redirect = Redirect::getNodeMenuObjectRedirect($op))) {
    switch ($redirect['page callback']) {
      case 'drupal_not_found':
        return MENU_NOT_FOUND;
      case 'drupal_access_denied':
        return MENU_ACCESS_DENIED;
      default:
        call_user_func_array($redirect['page callback'],
          $redirect['page arguments']);
        break;
    }
  }

  // ... otherwise do the normal.
  switch ($op) {
    case 'delete':
      return drupal_get_form($form_id,
        $node);
    default:
      $func = "node_page_{$op}";

      return $func($node);
  }
}


/**
 * Implements hook_element_info().
 */
function loft_core_element_info() {
  $types = array();
  $types['form_help'] = array(
    '#weight' => -99,

    // string|array If array,
    //elements are separate paragraphs,
    //without <p> tag wrappers.
    '#message' => array(),
    '#theme_wrappers' => array(
      'form_help',
      'form_element',
    ),
  );

  return $types;
}

/**
 * Return the maximum weight in a render array,
 * top level only.
 *
 * @param $render_array
 *
 * @return int
 */
function loft_core_max_weight($render_array) {
  $max = 0;
  array_walk($render_array,
    function ($value) use (&$max) {
      $max = max($max,
        data_api()->get($value,
          '#weight',
          0));
    });

  return $max;
}

/**
 * Return the minimum weight in a render array,
 * top level only.
 *
 * @param $render_array
 *
 * @return int
 */
function loft_core_min_weight($render_array) {
  $min = 0;
  array_walk($render_array,
    function ($value) use (&$min) {
      $min = min($min,
        data_api()->get($value,
          '#weight',
          0));
    });

  return $min;
}

function loft_core_theme($existing, $type, $theme, $path) {
  return array(
    'form_help' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements hook_preprocess_form_help().
 */
function loft_core_preprocess_form_help(&$vars) {
  $element =& $vars['element'];

  // Wrap all elements of #message in p tags,
  //if array.
  if (is_array($element['#message'])) {
    array_walk($element['#message'],
      function (&$value) {
        if (strpos($value,
            '<p') !== 0
        ) {
          $value = '<p>' . $value . '</p>';
        }
      });
    $element['#message'] = implode('',
      $element['#message']);
  }
}


/**
 * Provides output for form help.
 *
 * DO NOT CALL DIRECTLY USE ['#type' => 'form_help',...] INSTEAD!
 *
 * @ingroup themeable
 */
function theme_form_help($vars) {
  $element = $vars['element'];
  $attributes = drupal_attributes($element['#attributes']);

  return '<blockquote' . $attributes . '>' . $element['#message'] . $element['#children'] . '</blockquote>';
}

/**
 * Callback for #post_render to add a cache-busting token to image derivatives.
 *
 * This example shows how to add a cache buster to a certain node image field
 * when the user is logged in to the website.
 *
 * @code
 *   function HOOK_node_view_alter(&$build)
 *   {
 *       if (!empty($build['product:field_image']) && user_is_logged_in()) {
 *           $build['product:field_image']['#post_render'][] =
 *           'loft_core_image_src_itok_cache_buster';
 *       }
 *   }
 * @endcode
 *
 * @param string $html Expecting to contain ?itok=123"
 * @param array $build Expecting to find:
 *                      - #object->changed
 *
 * @return string The modified html
 */
function loft_core_image_src_itok_cache_buster($html, $build) {
  global $user;
  $buster = array(
    0 => variable_get('loft_core_cache_bust_token',
      'cb'),
    1 => NULL,
  );
  if ((!empty($build['#object']->changed))) {
    $buster[1] = $build['#object']->changed;
  }
  elseif ((!empty($user->access))) {
    $buster[1] = $user->access;
  }
  else {
    $buster[1] = time();
  }
  $regex = '/' . preg_quote(IMAGE_DERIVATIVE_TOKEN) . '[^"]+/';
  $html = preg_replace($regex,
    '$0&' . implode('=',
      $buster),
    $html);

  return $html;
}

/**
 * Invokes a hook on the default them if that implements it.
 *
 * @param $hook
 *   The name of the hook to invoke.
 * @param ...
 *   Arguments to pass to the hook.
 *
 * @return
 *   An array of return values of the hook implementations. If the theme returns
 *   arrays from it's implementation,
 * those are merged into one array
 *   recursively. Note: integer keys in arrays will be lost,
 * as the merge is
 *   done using array_merge_recursive().
 *
 * @see   drupal_alter()
 */
//function theme_invoke($hook)
//{
//    if (!($theme = variable_get('theme_default',
//null))) {
//        return;
//    }
//    $args = func_get_args();
//    // Remove $hook from the arguments.
//    unset($args[0]);
//    $return = array();
//
//    $function = $theme . '_' . $hook;
//    if (function_exists($function)) {
//        $result = call_user_func_array($function,
//$args);
//        if (isset($result) && is_array($result)) {
//            $return = array_merge_recursive($return,
//$result);
//        }
//        elseif (isset($result)) {
//            $return[] = $result;
//        }
//    }
//
//    return $return;
//}

/**
 * Test if a feature is live.
 *
 * If $feature is not registered it defaults to live.
 *
 * @param string $feature The id of the feature as declared by
 *                        HOOK_loft_core_features_switch().
 *
 * @return bool
 */
function is_live($feature) {
  static $features = NULL;
  if (is_null($features)) {
    $features = module_invoke_all('loft_core_code_release_info');
    $features[$feature]['is_live'] = isset($features[$feature]) ? $features[$feature]['is_live'] : TRUE;
  }

  return $features[$feature]['is_live'];
}


/**
 * Provides a test css class when environment is not prod.
 *
 * @param string $class
 *
 * @return string
 */
function loft_core_test_class($class) {
  static $testing;
  if ($testing || (defined('DRUPAL_ENV_ROLE') && strpos(DRUPAL_ENV_ROLE,
        'prod') !== 0) || (!empty($_COOKIE['loft_core_testing']) && $_COOKIE['loft_core_testing'] === ip_address())) {
    $testing = TRUE;

    return 't-' . $class;
  }
}

/**
 * Send an ajax command to fire off trackjs.console.
 *
 * @param $severity One of 'log',
 *                  'debug',
 *                  'info',
 *                  'warn',
 *                  'error'
 * @param $message
 *
 * @return array
 *
 * @see  Drupal.ajax.prototype.commands.loftCoreTrackJsConsole().
 * @link http://docs.trackjs.com/tracker/top-level-api#trackjsconsole
 *
 * @throws InvalidArgumentException if $severity is not valid.
 */
function loft_core_ajax_command_trackjs_console($severity,
                                                $message
) {
  $valid = array('log', 'debug', 'info', 'warn', 'error');
  if (!in_array($severity, $valid)
  ) {
    throw new \InvalidArgumentException("$severity must be one of: " . implode(',',
        $valid));
  }

  return array(
    'command' => 'loftCoreTrackJsConsole',
    'data' => array(
      'severity' => $severity,
      'message' => $message,
    ),
  );
}


function loft_core_ajax_command_bbq_push_state($hash_string) {
  return array(
    'command' => 'loftCoreAjaxBbqPushState',
    'data' => array(
      'hash' => '#' . ltrim($hash_string, '#'),
    ),
  );
}

/**
 * @param string $selector jQuery selector of the element to replace
 * @param string $content
 * @param int $duration Milliseconds for the fade to last.
 * @param int $delay Milliseconds before fade out commences.
 * @param string $css_prefix A means to custom or remove the css class prefix
 *                           on the fade classes.
 *
 * @return array
 */
function loft_core_ajax_command_html_and_fade($selector, $content, $duration = 800, $delay = 2200, $css_prefix = 'lc-') {
  return array(
    'command' => 'loftCoreAjaxHtmlAndFade',
    'data' => array(
      'selector' => $selector,
      'content' => $content,
      'duration' => $duration,
      'delay' => $delay,
      'cssPrefix' => $css_prefix,
    ),
  );
}

/**
 * Adds commands echoing all drupal messages to trackjs
 *
 * Place this in an ajax response function where you have access to the
 * $commands array that is being build for the response.s
 *
 * @param array &$commands
 * @param array $severities Which drupal_get_messages() severity levels to
 *                          send.  Defaults to warning and error.
 *
 * @see _loft_core_trackjs_get_severities().
 */
function loft_core_trackjs_echo_drupal_messages(array &$commands, array $severities = array(
  'warning',
  'error',
)
) {
  $groups = drupal_get_messages(NULL,
    FALSE);
  foreach ($groups as $level => $messages) {
    if (!in_array($level, $severities)) {
      continue;
    }
    switch ($level) {
      case 'warning':
        $trackjs_level = 'warn';
        break;
      case 'error':
        $trackjs_level = 'error';
        break;
      default:
        $trackjs_level = 'info';
        break;
    }
    foreach ($messages as $message) {
      $commands[] = loft_core_ajax_command_trackjs_console($trackjs_level,
        $message);
    }
  }
}

/**
 * Return a function to use for SMACSS classes
 *
 * @code
 * $cl = loft_core_cl('my-base');
 * $class = $cl('title');
 *
 * $class === 'my-base__title';
 * @endcode
 *
 * @param string $base The BEM module name
 * @param bool $pass_through Set this to true and $base will not be filtered
 *   for invalid chars.  Set it to false and spaces and underscores will be
 *   converted to hyphens.
 *
 * @return callable
 *
 * @deprecated Use loft_core_bem() instead.
 */
function loft_core_cl($base, $pass_through = FALSE) {
  if (!$pass_through) {
    $base = preg_replace('/[_ ]/', '-', $base);
  }

  return function ($name = '', $isComponent = TRUE) use ($base) {
    $names = is_array($name) ? $name : array($name);
    $glue = $isComponent ? '_' : '-';
    $classes = array();
    foreach ($names as $name) {
      $classes[] = $base . ($name ? str_repeat($glue, 2) . $name : '');
    }

    return implode(' ', $classes);
  };
}

/**
 * Return callbacks to use for generating BEM element and modifier classes.
 *
 * @param string $block
 *   The block name.
 *
 * @return array
 *   - 0 Callback taking element and returning the full BEM element class.
 *   - 1 Callback taking modifier and returning the full BEM modifier class.
 * @code
 *   list($bem, $bem_mod) = loft_core_bem('resource-hero');
 * @endcode
 */
function loft_core_bem($block) {

  // Single underscores should not exist in a block name.
  if (preg_match('/[^_]_[^_]/', $block)) {
    throw new \InvalidArgumentException("This BEM block name contains invalid characters: \"$block\".");
  }

  return [
    function ($element = '') use ($block) {
      return $element ? $block . '__' . $element : $block;
    },
    function ($modifier = '') use ($block) {
      return $modifier ? $block . '--' . $modifier : $block;
    },
  ];
}

/**
 * Stash or unstash a user.
 *
 * This function:
 * - allows you to run some code as a different user inside of a callback
 * function, in which case you need simple call it once with $temporary_user
 * and $callback.
 * - allows you to set a temporary user for a time until you call this function
 * again.  Unless you call this function again, the temporary user will become
 * the logged in user, so USE WITH CARE.
 *
 * The stashed users will persist in the SESSION.
 *
 * @param null $temporary_user Leave null when unstashing a previously stashed
 *   user.
 * @param callable|NULL $callback
 */
function loft_core_user_stash($temporary_user = NULL, Callable $callback = NULL) {
  global $user;
  static $stashed = NULL;
  $needs_unstash = is_null($temporary_user);

  if ($temporary_user) {
    if ($stashed) {
      throw new \RuntimeException("A user has already been stashed; you must unstash before you try to stash another user.");
    }
    $needs_unstash = FALSE;
    $stashed = $user;
    $user = $temporary_user;

    // When callback is provided, we unstash post $callback.
    if ($callback) {
      $callback();
      $needs_unstash = TRUE;
    }
  }

  if ($stashed && $needs_unstash) {
    $user = $stashed;
    $stashed = NULL;
  }
}

/**
 * Implements hook_exit().
 */
function loft_core_exit() {

  // If the user has not been unstashed by now, we need to force it before drupal_session_commit() happens.
  loft_core_user_stash();

  // Remove some messages by hook.
  if (!empty($_SESSION['messages']) && ($masks = module_invoke_all('loft_core_suppress_messages'))) {
    foreach (array_keys($masks) as $level) {
      if (isset($_SESSION['messages'][$level])) {
        foreach ($_SESSION['messages'][$level] as $key => $message) {
          foreach ($masks[$level] as $mask) {
            if (preg_match($mask, $message)) {
              unset($_SESSION['messages'][$level][$key]);
            }
          }
        }
      }
    };
  }
}

/**
 * Implements hook_mail_alter().
 *
 * Allow for a custom from address for registration emails.
 */
function loft_core_mail_alter(&$message) {
  if (($from = variable_get('loft_core_mail_registration_from', ''))) {
    switch ($message['key']) {
      case 'register_admin_created':
      case 'register_no_approval_required':
      case 'register_pending_approval':
        $message['from'] = $from;
        foreach (array('Return-Path', 'Sender', 'From') as $key) {
          $message['headers'][$key] = $from;
        }
        break;
    }
  }
}


/**
 * Return a build array for a div, optionally wrapping another build array.
 *
 * @param string|array $class One or more classes to add to the div.
 * @param array $element Optional, the build array which you will wrap
 *                              with the div.
 *
 * @return array The wrapped element.
 * The wrapped element.
 */
function div($class, $element = NULL) {
  $attr = '';
  if ($class) {
    $class = is_array($class) ? $class : array($class);
    $attr = drupal_attributes(array('class' => $class));
  }

  $div = array(
    '#prefix' => '<div' . $attr . '>',
    '#suffix' => "</div>",
    0 => $element,
  );
  if ($element) {
    $div[0] = $element;
  }

  return $div;
}

/**
 * Implements hook_preprocess_status_report().
 */
function loft_core_preprocess_status_report(&$vars) {
  $unset = NULL;
  array_walk($vars['requirements'], function (&$item, $key) use (&$unset) {
    if ($item['title'] !== 'Update notifications') {
      return;
    }

    //
    //
    // ITLS wants updates module disabled on prod since I monitor client updates using another system. And we don't
    // want clients to think there is a problem so we hide the default warning when update is disabled.
    //
    $allows_ftp_updates = variable_get('allow_authorize_operations', TRUE);
    if ($allows_ftp_updates) {
      $item = [
        'title' => '$allow_authorize_operations',
        'description' => t('If you are using GIT you should add this line to <em>settings.php</em>: <code>$conf[\'allow_authorize_operations\'] = FALSE;</code>'),
        'value' => 'true',
        'severity' => REQUIREMENT_ERROR,
      ];
    }
    elseif (DRUPAL_ENV_ROLE === 'prod' && $item['value'] === t('Enabled')) {
      $item['severity'] = REQUIREMENT_WARNING;
      $item['description'] = t('Update module should not be enabled on production as updates are handled by ITLS.');
    }
    elseif (isset($item['severity']) && $item['severity'] === REQUIREMENT_WARNING) {
      $unset = $key;
    }
  });

  if ($unset) {
    unset($vars['requirements'][$unset]);
  }
}

/**
 * Returns a relative path from an absolute path that points to this site.
 *
 * For www.mysite.com if $path = 'http://www.mysite.com/node/21', '/node/21'
 * will be returned.  See the variable
 * 'loft_core_smart_url' for how we determine what paths are part of the site.
 *
 * @param string $path
 * @param array $options These are the same as for url().  You might want to
 *   use alias = true.
 *
 * @return bool|false|int|string
 *
 * You may want to add something like this to your website
 * @code
 *  $conf['loft_core_smart_url'] = '/globalonenessproject.(?:org|loft)$/i';
 * @endcode
 */
function loft_core_smart_url($path, array $options = array()) {
  $parts = parse_url($path);
  if (!empty($parts['host'])) {

    // Determine the match regex.
    $regex = '/' . preg_quote(parse_url(url('/', ['absolute' => TRUE]), PHP_URL_HOST)) . '$/i';
    $regex = variable_get('loft_core_smart_url', $regex);

    if (preg_match($regex, $parts['host'])) {
      // This url points to something at this website.
      $path = drupal_get_normal_path(trim($parts['path'], '/'));
      $path = url($path, $options);
    }
  }

  return $path;
}

/**
 * Load (shadow) entities.
 *
 * For a node this returns an object with these properties: nid, vid and type.
 * These are faster to load and can be used in some contexts as needed just for
 * reference, like when using entity_extract_ids() or EntityFieldQuery.
 *
 * @param string $entity_type
 * @param array $entity_ids
 *
 * @return array An array of shadow entity objects.  Each item has the key
 *   #loaded set to false so you can check if this is a shadow entity.
 */
function loft_core_shadow_entity_load($entity_type, array $entity_ids) {
  $query = new \EntityFieldQuery();
  $entities = array_map(function ($bundles) {
    foreach ($bundles as &$bundle) {
      $bundle->loft_core_shadow = TRUE;
    }

    return $bundles;
  }, $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('entity_id', $entity_ids)
    ->execute());

  return $entities[$entity_type];
}

/**
 * Remove all null values from an array.
 *
 * @param $array
 *
 * @return array
 */
function null_filter($array) {
  return array_filter($array, function ($item) {
    return !is_null($item);
  });
}

/**
 * Make a css safe class or id
 *
 * @param      string or array $input
 *                    The string will be made css safe; array values will be
 *                    made css safe
 * @param bool $flatten
 *                    Optional.  Set to TRUE to flatten arrays into space
 *                    separated strings
 *
 * @return string or array
 */
function loft_core_css_safe($input, $flatten = FALSE) {
  if (is_array($input)) {
    $function = __FUNCTION__;
    foreach ($input as $key => $value) {
      $input[$key] = $this->$function($value);
    }

    return $flatten ? trim(implode(' ', $input)) : $input;
  }
  elseif ($input == ($strung = strval($input))) {
    $input = trim(strtolower(preg_replace('/[\W_]{1}/', '-', $strung)), '-');
    if (preg_match('/^(\d)(.*)/', $input, $found)) {
      $word = array(
        'zero',
        'one',
        'two',
        'three',
        'four',
        'five',
        'six',
        'seven',
        'eight',
        'nine',
      );
      $input = $word[$found[1]] . $found[2];
    }
  }

  return $input;
}

/**
 * Builds a list of all token-like patterns that appear in the text.
 *
 * @param $text
 *   The text to be scanned for possible tokens.
 *
 * @return
 *   An associative array of discovered tokens, grouped by type.
 */
function loft_core_twiglike_token_scan($text) {
  // Matches tokens with the following pattern: [$type:$name]
  // $type and $name may not contain  [ ] characters.
  // $type may not contain : or whitespace characters, but $name may.
  preg_match_all('/
    \{\{\s*([^.]*?)(?:\.(.*?))?\s*\}\}
    /x', $text, $matches);

  $types = $matches[1];
  $tokens = $matches[2];

  // Iterate through the matches, building an associative array containing
  // $tokens grouped by $types, pointing to the version of the token found in
  // the source text. For example, $results['node']['title'] = '[node:title]';
  $results = array();
  for ($i = 0; $i < count($tokens); $i++) {
    //    if (empty($matches[2][$i])) {
    //      $results['tokens'][$types[$i]] = $drupal = '[' . $matches[1][$i] . ']';
    //    }
    //    else {
    $results['tokens'][$types[$i]][$tokens[$i]] = $drupal = '[' . $matches[1][$i] . ':' . $matches[2][$i] . ']';
    //    }
    $results['map'][$drupal] = $matches[0][$i];
  }

  return $results;
}


/**
 * This function replaces twig-like tokens with values in $data
 *
 * Tokens must be {{ TYPE.KEY }} format.
 *
 * This is not for use with the token module.
 *
 * @see loft_core_twiglike_token_replace for Token module usage.
 *
 * @param string $text Should contain something like {{ sender.name }}
 * @param array $data Should be like ['sender'=>['name'=>'Paul']]
 *
 * @return string
 */
function loft_core_twiglike_replace($text, array $data = array()) {
  $g = data_api();
  $token_data = loft_core_twiglike_token_scan($text);
  foreach ($token_data['tokens'] as $type => $items) {
    foreach ($items as $key => $drupal) {
      if ($replace = $g->get($data, [$type, $key], '')) {
        $text = str_replace($token_data['map'][$drupal], $replace, $text);
      }
    }
  }

  return $text;
}

/**
 * Replace twig like tokens in a chunk of text.
 *
 * Only use this if your tokens are generated by hook_tokens().
 *
 * @param string $text
 * @param array $data
 * @param array $options
 *
 * @return mixed
 *
 * @see token_replace().
 */
function loft_core_twiglike_token_replace($text, array $data = array(), array $options = array()) {
  list($tokens, $values) = loft_core_twiglike_tokens_get($text, $data, $options);

  return $tokens ? str_replace($tokens, $values, $text) : $text;
}

/**
 * Get the tokens and values for a chunk of text.
 *
 * @param string $text
 * @param array $data
 * @param array $options
 *
 * @return array
 *
 * @code
 *   list($tokens, $values) = loft_core_twiglike_token_get(...
 * @endcode
 */
function loft_core_twiglike_tokens_get($text, array $data = array(), array $options = array()) {
  $token_data = loft_core_twiglike_token_scan($text);
  if (empty($token_data)) {
    return [[], []];
  }
  $text_tokens = $token_data['tokens'];

  $replacements = array();
  foreach ($text_tokens as $type => $tokens) {
    $replacements += token_generate($type, $tokens, $data, $options);
    if (!empty($options['clear'])) {
      $replacements += array_fill_keys($tokens, '');
    }
  }

  // Optionally alter the list of replacement values.
  if (!empty($options['callback']) && function_exists($options['callback'])) {
    $function = $options['callback'];
    $function($replacements, $data, $options);
  }

  $tokens = [];
  foreach ($replacements as $find => $replace) {
    $tokens[$token_data['map'][$find]] = $replace;
  }
  $values = array_map(function ($item) {
    return strval($item);
  }, array_values($tokens));
  $tokens = array_keys($tokens);

  return [$tokens, $values];

}


/**
 * Implements hook_twiggy_twig_alter().
 */
function loft_core_twiggy_twig_alter($twig) {
  $twig->addFunction(new \Twig_SimpleFunction('splitBy', [
    '\AKlump\LoftLib\Code\Strings',
    'splitBy',
  ]));
  $twig->addFunction(new \Twig_SimpleFunction('loft_core_test_class', 'loft_core_test_class'));
}

/**
 * Return an array of taxony items filtered to unique.
 *
 * @param array $items
 *
 * @return array
 */
function loft_core_taxonomy_unique(array $items) {
  $index = [];

  return array_filter($items, function ($item) use (&$index) {
    $item = (array) $item;
    $allow = !in_array($item['tid'], $index);
    $index[] = $item['tid'];

    return $allow;
  });
}

/**
 * Return $element with all children keys turned into property keys (prepend
 * '#')
 *
 * @param $element
 *
 * @return array
 */
function loft_core_element_children_to_properties($element) {
  return array_combine(array_map(function ($item) {
    return '#' . $item;
  }, array_keys($element)), array_values($element));
}

/**
 * Implements hook_stream_wrappers().
 */
function loft_core_stream_wrappers() {

  // This is here to address an issue of missing class when using drush updb.
  if (!class_exists('\Drupal\loft_core\StaticContentStreamWrapper')) {
    module_load_include('php', 'loft_core', 'src/Drupal/loft_core/StaticContentStreamWrapper');
  }

  $wrappers = [
    'static-content' => [
      'name' => t('Static content'),
      'class' => '\Drupal\loft_core\StaticContentStreamWrapper',
      'description' => t("Content that should not be exposed to the CMS, but included in the final output."),
    ],
  ];

  return $wrappers;
}
